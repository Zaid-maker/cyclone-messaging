{"version":3,"sources":["components/Login.jsx","components/customHooks/useLocalStorage.jsx","components/Context/ContactsProvider.jsx","components/Context/SocketProvider.jsx","components/Context/ConversationsProvider.jsx","components/SideBar/Conversations.jsx","components/SideBar/Contacts.jsx","components/SideBar/NewContactModal.jsx","components/SideBar/NewConversationModal.jsx","components/SideBar/SideBar.jsx","components/Chat/OpenConversation.jsx","components/Navbar.jsx","components/Footer.jsx","components/EmptyChat.jsx","components/Dashboard.jsx","components/App.js","index.js"],"names":["Login","onIdSubmit","idRef","useRef","Container","className","src","alt","style","maxHeight","maxWidth","fontSize","Form","onSubmit","e","preventDefault","current","value","Group","Label","Control","type","ref","required","placeholder","Button","onClick","uuidV4","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","query","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","sendMessage","emit","selectConversationIndex","createConversation","Conversations","ListGroup","variant","Item","action","active","r","join","Contacts","NewContactModal","closeModal","nameRef","Modal","Header","closeButton","Body","console","log","NewConversationModal","selectedContactIds","setSelectedContactIds","toast","error","controlId","Check","includes","label","onChange","contactId","prevSelectedContactIds","filter","prevId","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","modalOpen","setModalOpen","conversationsOpen","Tab","onSelect","Nav","Link","eventKey","Content","cursor","color","Pane","show","onHide","OpenConversation","setText","showEmojiBoard","setShowEmojiBoard","emojiRef","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","setRef","node","scrollIntoView","smooth","lastMessage","ReactEmoji","emojify","onEmojiClick","emojiObject","concat","emoji","InputGroup","Append","Navbar","Fragment","height","data-toggle","data-target","dark","logout","removeItem","window","location","reload","ModalLogout","data-dismiss","Footer","EmptyChat","role","aria-label","Dashboard","Row","App","setId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.40579ade.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { Container, Form, Button } from \"react-bootstrap\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nexport default function Login({ onIdSubmit }) {\n  const idRef = useRef();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onIdSubmit(idRef.current.value);\n  };\n\n  function createNewId() {\n    onIdSubmit(uuidV4());\n  }\n\n  return (\n    <Container className=\"login\">\n      <div className=\"row\">\n        <div className=\"col-sm-8 d-flex align-items-center\">\n          <img\n            src=\"https://cdn.discordapp.com/attachments/795010536365752320/799761776824418354/bg4.png\"\n            alt=\"\"\n            style={{ maxHeight: \"100vh\", maxWidth: \"100%\" }}\n          />\n        </div>\n        <div className=\"col-sm-4 d-flex flex-column justify-content-center\">\n          <div className=\"pl-0\">\n            <h1 className=\"text-white mb-2\">Chat App</h1>\n            <p className=\"text-blue mb-0\">\n              <i className=\"material-icons\" style={{ fontSize: \"18px\" }}>\n                check\n              </i>{\" \"}\n              for Instant Messaging\n            </p>\n            <p className=\"text-blue mb-0\">\n              <i className=\"material-icons\" style={{ fontSize: \"18px\" }}>\n                check\n              </i>{\" \"}\n              No Signup Required\n            </p>\n            <p className=\"text-blue\">\n              <i className=\"material-icons\" style={{ fontSize: \"18px\" }}>\n                check\n              </i>{\" \"}\n              Multiple Group Chats with no limit on members\n            </p>\n          </div>\n          <Form onSubmit={handleSubmit} className=\"w-100 mt-2\">\n            <Form.Group>\n              <Form.Label className=\"text-white\">Enter Your Id</Form.Label>\n              <Form.Control\n                type=\"text\"\n                ref={idRef}\n                required\n                placeholder=\"Enter ID\"\n              />\n            </Form.Group>\n            <Button type=\"submit\" className=\"mr-2 button\">\n              Login\n            </Button>\n            <Button onClick={createNewId} className=\"button\">\n              Create A New Id\n            </Button>\n          </Form>\n        </div>\n      </div>\n    </Container>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nconst PREFIX = \"whatsapp-clone-\";\n\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key;\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey);\n    // console.log(jsonValue);\n    if (jsonValue != null) {\n      if (jsonValue === \"undefined\") {\n        return null;\n      } else {\n        return JSON.parse(jsonValue);\n      }\n    }\n    if (typeof initialValue === \"function\") {\n      return initialValue();\n    } else {\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n\n  return [value, setValue];\n}\n","import React, { useContext } from \"react\";\nimport useLocalStorage from \"../customHooks/useLocalStorage\";\n\nconst ContactsContext = React.createContext();\n\nexport function useContacts() {\n  return useContext(ContactsContext);\n}\n\nexport function ContactsProvider({ children }) {\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\n\n  function createContact(id, name) {\n    setContacts((prevContacts) => {\n      return [...prevContacts, { id, name }];\n    });\n  }\n\n  return (\n    <ContactsContext.Provider value={{ contacts, createContact }}>\n      {children}\n    </ContactsContext.Provider>\n  );\n}","import React, { useContext, useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\n\nconst SocketContext = React.createContext();\n\nexport function useSocket() {\n  return useContext(SocketContext);\n}\n\nexport function SocketProvider({ id, children }) {\n  const [socket, setSocket] = useState();\n  // const ENDPOINT = \"http://localhost:5000\";\n  const ENDPOINT = \"https://cyclone-messaging-server.herokuapp.com/\";\n\n  useEffect(() => {\n    const newSocket = io(ENDPOINT, { query: { id } });\n    setSocket(newSocket);\n\n    return () => newSocket.close();\n  }, [id]);\n\n  return (\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\n  );\n}\n","import React, { useContext, useState, useEffect, useCallback } from \"react\";\nimport useLocalStorage from \"../customHooks/useLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { useSocket } from \"./SocketProvider\";\n\nconst ConversationsContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage(\n    \"conversations\",\n    []\n  );\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const { contacts } = useContacts();\n  const socket = useSocket();\n\n  function createConversation(recipients) {\n    setConversations((prevConversations) => {\n      return [...prevConversations, { recipients, messages: [] }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(\n    ({ recipients, text, sender }) => {\n      setConversations((prevConversations) => {\n        let madeChange = false;\n        const newMessage = { sender, text };\n        const newConversations = prevConversations.map((conversation) => {\n          if (arrayEquality(conversation.recipients, recipients)) {\n            madeChange = true;\n            return {\n              ...conversation,\n              messages: [...conversation.messages, newMessage],\n            };\n          }\n\n          return conversation;\n        });\n\n        if (madeChange) {\n          return newConversations;\n        } else {\n          return [...prevConversations, { recipients, messages: [newMessage] }];\n        }\n      });\n    },\n    [setConversations]\n  );\n\n  useEffect(() => {\n    if (socket == null) return;\n\n    socket.on(\"receive-message\", addMessageToConversation);\n\n    return () => socket.off(\"receive-message\");\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(recipients, text) {\n    socket.emit(\"send-message\", { recipients, text });\n\n    addMessageToConversation({ recipients, text, sender: id });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map((recipient) => {\n      const contact = contacts.find((contact) => {\n        return contact.id === recipient;\n      });\n      const name = (contact && contact.name) || recipient;\n      return { id: recipient, name };\n    });\n\n    const messages = conversation.messages.map((message) => {\n      const contact = contacts.find((contact) => {\n        return contact.id === message.sender;\n      });\n      const name = (contact && contact.name) || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message, senderName: name, fromMe };\n    });\n\n    const selected = index === selectedConversationIndex;\n    return { ...conversation, messages, recipients, selected };\n  });\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation,\n  };\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  );\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n\n  a.sort();\n  b.sort();\n\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n","import React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { useConversations } from \"../Context/ConversationsProvider\";\n\nexport default function Conversations() {\n  const { conversations, selectConversationIndex } = useConversations();\n\n  return (\n    <ListGroup variant=\"flush\">\n      {conversations.map((conversation, index) => (\n        <ListGroup.Item\n          key={index}\n          action\n          onClick={() => selectConversationIndex(index)}\n          active={conversation.selected}\n        >\n          {conversation.recipients.map((r) => r.name).join(\", \")}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n}\n","import React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { useContacts } from \"../Context/ContactsProvider\";\n\nexport default function Contacts() {\n  const { contacts } = useContacts();\n  // console.table(contacts);\n\n  return (\n    <ListGroup variant=\"flush\">\n      {contacts.map((contact) => (\n        <ListGroup.Item key={contact.id}>{contact.name}</ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport { useContacts } from \"../Context/ContactsProvider\";\n\nexport default function NewContactModal({ closeModal }) {\n  const idRef = useRef();\n  const nameRef = useRef();\n  const { createContact } = useContacts();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!idRef.current.value || !nameRef.current.value) {\n      console.log(\"add values\");\n      return;\n    }\n\n    createContact(idRef.current.value, nameRef.current.value);\n    closeModal();\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>Create Contact</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>Id</Form.Label>\n            <Form.Control\n              type=\"text\"\n              ref={idRef}\n              placeholder=\"enter id of your friend\"\n              required\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              ref={nameRef}\n              placeholder=\"enter name\"\n              required\n            />\n          </Form.Group>\n          <div className=\"text-center mt-4\">\n            <Button type=\"submit\" className=\"button w-100\">\n              Create\n            </Button>\n          </div>\n        </Form>\n      </Modal.Body>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { useContacts } from \"../Context/ContactsProvider\";\nimport { useConversations } from \"../Context/ConversationsProvider\";\n\nexport default function NewConversationModal({ closeModal }) {\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\n  const { contacts } = useContacts();\n  const { createConversation } = useConversations();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (selectedContactIds.length === 0) {\n      toast.error(\"Add atleast one contact\");\n      return;\n    }\n    createConversation(selectedContactIds);\n    closeModal();\n  }\n\n  function handleCheckboxChange(contactId) {\n    setSelectedContactIds((prevSelectedContactIds) => {\n      if (prevSelectedContactIds.includes(contactId)) {\n        return prevSelectedContactIds.filter((prevId) => {\n          return contactId !== prevId;\n        });\n      } else {\n        return [...prevSelectedContactIds, contactId];\n      }\n    });\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>Create Chat</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          {contacts.map((contact) => (\n            <Form.Group controlId={contact.id} key={contact.id}>\n              <Form.Check\n                type=\"checkbox\"\n                value={selectedContactIds.includes(contact.id)}\n                label={contact.name}\n                onChange={() => handleCheckboxChange(contact.id)}\n              />\n            </Form.Group>\n          ))}\n          <div className=\"text-center mt-4\">\n            <Button type=\"submit\" className=\"button w-100\">\n              Create\n            </Button>\n          </div>\n        </Form>\n      </Modal.Body>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Tab, Nav, Modal } from \"react-bootstrap\";\nimport Conversations from \"./Conversations\";\nimport Contacts from \"./Contacts\";\nimport NewContactModal from \"./NewContactModal\";\nimport NewConversationModal from \"./NewConversationModal\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst CONVERSATIONS_KEY = \"conversations\";\nconst CONTACTS_KEY = \"contacts\";\n\nexport default function Sidebar() {\n  const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY);\n  const [modalOpen, setModalOpen] = useState(false);\n  const conversationsOpen = activeKey === CONVERSATIONS_KEY;\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\n        <Nav variant=\"tabs\">\n          <Nav.Item>\n            <Nav.Link eventKey={CONVERSATIONS_KEY}>Chats</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\n          </Nav.Item>\n        </Nav>\n        <Tab.Content>\n          <div className=\"top pb-3\">\n            <h3 className=\"text-light mb-0 pl-3\">\n              {conversationsOpen ? \"Chat\" : \"Contact\"}\n              <span\n                className=\"material-icons pl-2\"\n                onClick={() => setModalOpen(true)}\n                style={{ cursor: \"pointer\", color: \"#369ee1\" }}\n              >\n                &#xe148;\n              </span>\n            </h3>\n          </div>\n          <Tab.Pane eventKey={CONVERSATIONS_KEY}>\n            <Conversations />\n          </Tab.Pane>\n          <Tab.Pane eventKey={CONTACTS_KEY}>\n            <Contacts />\n          </Tab.Pane>\n        </Tab.Content>\n      </Tab.Container>\n\n      <Modal show={modalOpen} onHide={closeModal}>\n        {conversationsOpen ? (\n          <NewConversationModal closeModal={closeModal} />\n        ) : (\n          <NewContactModal closeModal={closeModal} />\n        )}\n      </Modal>\n    </div>\n  );\n}\n","import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\nimport { useConversations } from \"../Context/ConversationsProvider\";\nimport Picker from \"emoji-picker-react\";\nimport ReactEmoji from \"react-emoji\";\n\nexport default function OpenConversation() {\n  const [text, setText] = useState(\"\");\n  const [showEmojiBoard, setShowEmojiBoard] = useState(false);\n  const emojiRef = useRef(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (emojiRef.current && !emojiRef.current.contains(event.target)) {\n        // console.log(emojiRef.current, document);\n        setShowEmojiBoard(false);\n      }\n    };\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [emojiRef]);\n\n  const setRef = useCallback((node) => {\n    if (node) {\n      node.scrollIntoView({ smooth: true });\n    }\n  }, []);\n\n  const onEmojiClick = (event, emojiObject) => {\n    setText((text) => text.concat(emojiObject.emoji));\n  };\n\n  const { sendMessage, selectedConversation } = useConversations();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    sendMessage(\n      selectedConversation.recipients.map((r) => r.id),\n      text\n    );\n    setText(\"\");\n  };\n\n  return (\n    <div className=\"chat-text-container\">\n      <div className=\"chat-text\">\n        {selectedConversation.messages.map((message, index) => {\n          const lastMessage =\n            selectedConversation.messages.length - 1 === index;\n          return (\n            <div\n              ref={lastMessage ? setRef : null}\n              key={index}\n              className={`text${message.fromMe ? \"-sameUser\" : \"-diffUser\"}`}\n            >\n              <div className=\"message\">{ReactEmoji.emojify(message.text)}</div>\n              <div\n                className={`text-muted small ${\n                  message.fromMe ? \"text-right\" : \"\"\n                }`}\n              >\n                {message.fromMe ? \"You\" : message.senderName}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <Form onSubmit={handleSubmit} className=\"bottom\">\n        {showEmojiBoard && (\n          <div ref={emojiRef}>\n            <Picker onEmojiClick={onEmojiClick} />\n          </div>\n        )}\n        <Form.Group className=\"m-2\">\n          <InputGroup>\n            <Form.Control\n              type=\"text\"\n              required\n              placeholder=\"enter your message\"\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n            />\n            <button\n              type=\"button\"\n              className=\"material-icons button btn-primary\"\n              onClick={() => setShowEmojiBoard(!showEmojiBoard)}\n            >\n              insert_emoticon\n            </button>\n            <InputGroup.Append>\n              <Button type=\"submit\" className=\"button ml-1\">\n                Send\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n      </Form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nconst Navbar = ({ id }) => {\n  const logout = (event) => {\n    event.preventDefault();\n    localStorage.removeItem(\"whatsapp-clone-id\");\n    localStorage.removeItem(\"whatsapp-clone-contacts\");\n    localStorage.removeItem(\"whatsapp-clone-conversations\");\n\n    window.location.reload(false);\n  };\n\n  const copyText = () =>\n    toast.dark(\n      \"Your Id is copied to Clipboard. Now you can share it with your friends !!\"\n    );\n\n  return (\n    <React.Fragment>\n      <ToastContainer />\n      <nav\n        className=\"navbar navbar-expand-sm bg-light mb-0 header d-flex justify-content-between\"\n        style={{ height: \"8vh\" }}\n      >\n        <div>\n          <h5 className=\"text-light d-inline\">Chat App</h5>\n          <button\n            className=\"btn-primary button ml-4\"\n            data-toggle=\"modal\"\n            data-target=\"#myModal\"\n          >\n            Logout\n          </button>\n        </div>\n\n        <div>\n          <span className=\"text-light\">\n            <b>Your Id:</b>\n          </span>{\" \"}\n          <span className=\"text-light pr-2\" value={id}>\n            <span className=\"pr-3\"> {id} </span>\n            <CopyToClipboard text={id}>\n              <i\n                className=\"material-icons\"\n                style={{ fontSize: \"16px\", cursor: \"pointer\" }}\n                onClick={() => copyText()}\n              >\n                &#xe14d;\n              </i>\n            </CopyToClipboard>\n          </span>\n        </div>\n      </nav>\n      <ModalLogout logout={logout} />\n    </React.Fragment>\n  );\n};\n\nexport default Navbar;\n\nconst ModalLogout = ({ logout }) => {\n  return (\n    <React.Fragment>\n      <div className=\"modal fade\" id=\"myModal\">\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h4 className=\"modal-title\">Logging Out !!!</h4>\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                &times;\n              </button>\n            </div>\n            <div className=\"modal-body border border-0\">\n              If you log out all your saved contacts and conversations will be deleted. We do not store any of your chats. There is no way to retrieve it.\n            </div>\n            <div className=\"modal-footer border border-0\">\n              <button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                data-dismiss=\"modal\"\n                onClick={(e) => logout(e)}\n              >\n                Logout and Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <React.Fragment>\n      <nav\n        className=\"navbar navbar-expand-sm bg-light mb-0 footer\"\n        style={{ height: \"7vh\" }}\n      >\n        <div className=\"text-center text-light w-100\">\n          <p className=\"mb-0\">\n            Proudly developed by DevMirza Development.\n          </p>\n        </div>\n      </nav>\n    </React.Fragment>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nconst EmptyChat = () => {\n  return (\n    <React.Fragment>\n      <div\n        className=\"d-flex justify-content-center align-items-center w-100 text-white flex-column\"\n        style={{ height: \"70vh\" }}\n      >\n        <h1>\n          Your chatbox is empty\n          <span role=\"img\" aria-label=\"\">\n            🥺🥺🥺\n          </span>\n        </h1>\n        <div className=\"mt-4 ml-5 text-blue w-50\">\n          <p className=\"mb-1\">\n            <i className=\"material-icons pr-2\" style={{ fontSize: \"18px\" }}>\n              check\n            </i>\n            Share your <b>id</b> with your friends\n          </p>\n          <p className=\"mb-1\">\n            <i className=\"material-icons pr-2\" style={{ fontSize: \"18px\" }}>\n              check\n            </i>\n            Get their <b>id</b> and create contacts\n          </p>\n          <p className=\"mb-1\">\n            <i className=\"material-icons pr-2\" style={{ fontSize: \"18px\" }}>\n              check\n            </i>\n            Now you can either create private or group chat rooms by selecting\n            your Friends name\n          </p>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default EmptyChat;\n","import React from \"react\";\nimport { Row } from \"react-bootstrap\";\nimport Sidebar from \"../components/SideBar/SideBar\";\nimport OpenConversation from \"../components/Chat/OpenConversation\";\nimport { useConversations } from \"../components/Context/ConversationsProvider\";\nimport Navbar from \"./Navbar\";\nimport Footer from \"./Footer\";\nimport EmptyChat from \"./EmptyChat\";\n\nexport default function Dashboard({ id }) {\n  const { selectedConversation } = useConversations();\n\n  return (\n    <React.Fragment>\n      <Navbar id={id} />\n      <div className=\"container-fluid\" style={{ height: \"85vh\" }}>\n        <Row>\n          <div className=\"col-sm-3\">\n            <Sidebar id={id} />\n          </div>\n          <div className=\"col-sm-9\">\n            {!selectedConversation && <EmptyChat />}\n            {selectedConversation && <OpenConversation />}\n          </div>\n        </Row>\n      </div>\n      <Footer />\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport Login from \"./Login\";\nimport useLocalStorage from \"../components/customHooks/useLocalStorage\";\nimport Dashboard from \"./Dashboard\";\nimport { ContactsProvider } from \"../components/Context/ContactsProvider\";\nimport { ConversationsProvider } from \"../components/Context/ConversationsProvider\";\nimport { SocketProvider } from \"../components/Context/SocketProvider\";\nimport \"../styles/style.css\";\n\nconst App = () => {\n  const [id, setId] = useLocalStorage(\"id\");\n\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  );\n\n  return id ? dashboard : <Login onIdSubmit={setId} />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}